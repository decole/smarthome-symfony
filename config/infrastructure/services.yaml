imports:
  - { resource: 'doctrine/repositories.yaml' }
  - { resource: 'doctrine/transactions.yaml' }
  - { resource: 'events.yaml' }

services:
  _defaults:
    autowire: true
    autoconfigure: true

  mqtt_client:
    class: App\Infrastructure\Mqtt\Entity\MqttClient
    arguments:
      $broker: '%env(MQTT_BROKER_URL)%'
      $port: '%env(MQTT_PORT)%'

  App\Infrastructure\Mqtt\Service\MqttHandleService:
    arguments:
      $client: '@mqtt_client'
      $logger: '@monolog.logger.mqtt_transport'

  app.cache.adapter.redis:
    parent: 'cache.adapter.redis'
    tags:
      - { name: 'cache.pool', namespace: 'doctrine_query' }

  redis_client:
    class: Redis
    factory: Symfony\Component\Cache\Adapter\RedisAdapter::createConnection
    arguments:
      - '%env(REDIS_DSN)%'

  redis_tag_adapter:
    class: Symfony\Component\Cache\Adapter\RedisTagAwareAdapter
    arguments:
      - '@redis_client'
      - 'uberserver_app'

  redis_simple_adapter:
    class: Symfony\Component\Cache\Adapter\RedisAdapter
    arguments:
      - '@redis_client'
      - 'uberserver_app'

  App\Infrastructure\Cache\CacheService:
    arguments:
      $cache: '@redis_simple_adapter'

  App\Infrastructure\Security\Auth\Service\EmailVerifyService: ~

  App\Infrastructure\Security\Auth\Service\CsrfService: ~

  App\Infrastructure\Security\Register\Service\SignUpService:
    arguments:
      $email: '%env(EMAIL_REGISTRATION_EMAIL)%'
      $subject: '%env(EMAIL_REGISTRATION_EMAIL_SUBJECT)%'

  App\Infrastructure\Prometheus\Metric\MqttPayloadMetricsCollector:
    tags:
      - { name: prometheus_metrics_bundle.metrics_generator }

  App\Infrastructure\Telegram\Service\TelegramService:
    arguments:
      $apiToken: '%env(TELEGRAM_BOT_TOKEN)%'
      $logger: '@monolog.logger.telegram_service'

  App\Infrastructure\AliceSkill\Service\AliceSkillService: ~

  App\Infrastructure\YandexSmartHome\Service\SmartHomeService: ~

  App\Infrastructure\YandexSmartHome\Service\DeviceService: ~

  App\Infrastructure\Quasar\Service\QuasarNotificationService:
    arguments:
      $cookies: '%env(ALICE_QUASAR_COOKIE)%'
      $deviceId: '%env(ALICE_QUASAR_DEVICE)%'
      $scenarioId: '%env(ALICE_QUASAR_SCENARIO_ID)%'
      $logger: '@monolog.logger.quasar_service'

  App\Infrastructure\Discord\Service\DiscordService:
    arguments:
      $webhookUri: '%env(DISCORD_WEBHOOK)%'
      $logger: '@monolog.logger.discord_service'

  App\Infrastructure\TwoFactor\Service\TwoFactorService:
    arguments:
      $isEnable: '%env(bool:TWO_FACTOR_AUTH)%'

  App\Infrastructure\TwoFactor\Service\TwoFactorQrCodeService:
    arguments:
      $host: '%env(APP_HOST)%'